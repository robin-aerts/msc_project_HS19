# -*- coding: utf-8 -*-
"""fehraltorf_all_nodes.ipynb

Automatically generated by Colaboratory.

#placeholder

#import dependencies
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, f1_score, confusion_matrix
from sklearn.utils import shuffle
from math import sqrt
import seaborn as sns
from timeit import default_timer as timer

from google.colab import drive
drive.mount('/content/gdrive')

sns.set()

#make sure colab uses gpu
tf.test.gpu_device_name()

#lag values to create predictors
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
	"""
	Frame a time series as a supervised learning dataset.
	Arguments:
		data: Sequence of observations as a list or NumPy array.
		n_in: Number of lag observations as input (X).
		n_out: Number of observations as output (y).
		dropnan: Boolean whether or not to drop rows with NaN values.
	Returns:
		Pandas DataFrame of series framed for supervised learning.
	"""
	n_vars = 1 if type(data) is list else data.shape[1]
	df = pd.DataFrame(data)
	cols, names = list(), list()
	# input sequence (t-n, ... t-1)
	for i in range(n_in, 0, -1):
		cols.append(df.shift(i))
		names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
	# forecast sequence (t, t+1, ... t+n)
	for i in range(0, n_out):
		cols.append(df.shift(-i))
		if i == 0:
			names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
		else:
			names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
	# put it all together
	agg = pd.concat(cols, axis=1)
	agg.columns = names
	# drop rows with NaN values
	if dropnan:
		agg.dropna(inplace=True)
	return agg

#oversampling and undersampling function
def oversample(X_train, y_train, n_oversample = 10):
  
  #concat X_train and y_train
  overs_df = pd.concat([X_train, y_train], axis = 1)
  #sort by level
  overs_df.sort_values(by=['level_3'],
                       inplace=True,
                       ascending=False)


  #extract top 50 rows
  top_50 = overs_df.iloc[:50]

  #concatenate
  for i in range(n_oversample):
    overs_df = pd.concat([overs_df, top_50])
  
  overs_X_train = overs_df.iloc[:,:-1]
  overs_y_train = overs_df.iloc[:,-1]
  return(overs_X_train, overs_y_train)

def undersample(X_train, y_train, n_undersample = 1000):
  y_train_names = y_train.columns.values.tolist()
	#concat X_train and y_train
  unders_df = pd.concat([X_train, y_train], axis = 1)
  #sort by level
  unders_df.sort_values(by=y_train_names,
                       inplace=True)
  unders_df = unders_df.iloc[n_undersample:]
  print(unders_df.head())
  unders_X_train = unders_df.iloc[:,:-y_train.shape[1]]
  unders_y_train = unders_df.iloc[:,-y_train.shape[1]:]
  return(unders_X_train, unders_y_train)

#generate swmm column names
def get_swmm_column_names(n):
  name_list = []
  name_list.append('date_time')
  for i in range(n):
    swmm_name = 'level_' + str(i + 1)
    #print(swmm_name)
    name_list.append(swmm_name)
  return name_list

#read data
rain = pd.read_csv('/content/gdrive/My Drive/msc_project/tsvalues_long.csv', sep=';', skiprows=5)
#rain = pd.read_csv('tsvalues_long_synth.csv')

#cut rows to match simulation
n_rain = rain.shape[0]

rain = rain[6:n_rain-1]
#rain = rain[7:n_rain-1]
#rain = rain[(365*24*10*4+24*10*30*2+24*10*14+44+3):n_rain - (365*24*10 + 24*10*54 + 10*10-4)]
print(rain.shape)
rain.drop(columns = ['#Timestamp'], inplace = True)
#rain.drop(columns = ['X.Timestamp'], inplace = True) #for synth

swmm = pd.read_csv('/content/gdrive/My Drive/msc_project/df_table_all.csv')

#number of labels
nlabel = swmm.shape[1]-1
swmm.columns = get_swmm_column_names(n=nlabel)
print(swmm.shape)

n_lag = 20*4

rain = series_to_supervised(rain, n_lag)

swmm = swmm[n_lag:]

#get number of predictors
n_pred = rain.shape[1]

date_time = swmm['date_time']
date_time = pd.to_datetime(date_time)

swmm.drop(columns = ['date_time'],
          inplace = True)

#cbind rain and swmm
design_df = pd.concat([rain.reset_index(drop=True),
                       swmm.reset_index(drop=True)],
                       axis = 1)

#separate X and y, training and testing
n_train = round(design_df.shape[0] * 0.8)
X_train = design_df.iloc[0:n_train,:-nlabel]
y_train = design_df.iloc[0:n_train,-nlabel:]
X_test = design_df.iloc[n_train:,:-nlabel]
y_test = design_df.iloc[n_train:,-nlabel:]

date_time_test = date_time.iloc[n_train:]

#oversample training set (optional)
#X_train, y_train = oversample(X_train, y_train,
#                              n_oversample=20)
#undersample training set (optional)
X_train, y_train = undersample(X_train, y_train,
                               n_undersample = 200000)

#normalize dataset
train_stats = X_train.describe().transpose()

def norm(x):
  return (x - train_stats['mean']) / train_stats['std']
normed_X_train = norm(X_train)
normed_X_test = norm(X_test)

#shuffle X_train and y_train for better validation
normed_X_train, y_train = shuffle(normed_X_train, y_train)

#reshape X for LSTM
normed_X_train = normed_X_train.to_numpy().reshape(normed_X_train.shape[0], normed_X_train.shape[1],1)
normed_X_test = normed_X_test.to_numpy().reshape(normed_X_test.shape[0], normed_X_test.shape[1],1)

#define model
def build_model(n_nodes):
  model = keras.Sequential([
    layers.CuDNNLSTM(n_nodes, input_shape = normed_X_train.shape[-2:]),
    layers.Dense(n_nodes, activation=tf.nn.relu),
    layers.Dense(nlabel)
  ])

  optimizer = tf.keras.optimizers.Adam()

  model.compile(loss='mean_squared_error',
                optimizer=optimizer,
                metrics=['mean_absolute_error', 'mean_squared_error'])
  return model

model = build_model(n_nodes = 16)
model.summary()

#train the model
class PrintDot(keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs):
    if epoch % 100 == 0: print('')
    print('.', end='')
    
early_stop = keras.callbacks.EarlyStopping(monitor = 'val_loss',
                                           patience = 10)

n_epochs = 100

history = model.fit(
    normed_X_train, y_train,
    epochs = n_epochs,
    batch_size = 128,
    validation_split = 0.4,
    verbose = 1,
    callbacks = [early_stop, PrintDot()])

#plot history

def plot_history(history):
  hist = pd.DataFrame(history.history)
  hist['epoch'] = history.epoch

  plt.figure()
  plt.xlabel('Epoch')
  plt.ylabel('Mean Abs Error [m]')
  plt.plot(hist['epoch'], hist['mean_absolute_error'],
           label='Train Error')
  plt.plot(hist['epoch'], hist['val_mean_absolute_error'],
           label = 'Val Error')
  plt.legend()
  plt.savefig('mean_abs_error_ann.png',
             dpi = 300)

  plt.figure()
  plt.xlabel('Epoch')
  plt.ylabel('Mean Square Error [$m^2$]')
  plt.plot(hist['epoch'], hist['mean_squared_error'],
           label='Train Error')
  plt.plot(hist['epoch'], hist['val_mean_squared_error'],
           label = 'Val Error')
  plt.legend()
  plt.savefig('mean_squared_error.png',
             dpi = 300)
  
plot_history(history)

#use model on test set

y_pred = model.predict(normed_X_test)

#get fb ara, r√ºb usterstrasse
y_test_fb_ara = y_test['level_436']
y_pred_fb_ara = y_pred[:,435]
y_test_rub_usterstrasse = y_test['level_438']
y_pred_rub_usterstrasse = y_pred[:,437]
y_test_rb_pw_80 = y_test['level_439']
y_pred_rb_pw_80 = y_pred[:,438]
y_test_bacheinlauf_47 = y_test['level_433']
y_pred_bacheinlauf_47 = y_pred[:,432]


def eval_multivar(y_test, y_pred, manhole_str):
  rmse = sqrt(mean_squared_error(y_test, y_pred))
  mae = mean_absolute_error(y_test, y_pred)
  r2 = r2_score(y_test, y_pred)
  nse = 1 - sum((y_pred - y_test)**2) / sum((y_test - y_test.mean())**2)

  #plot predictions
  fig_1, ax_1 = plt.subplots()
  ax_1.plot(date_time_test, y_pred, label = 'Water Level ANN')
  ax_1.plot(date_time_test, y_test, label = 'Water Level SWMM')
  ax_1.set_ylabel('Water Level [m]')
  ax_1.legend()
  fig_1.autofmt_xdate()
  plt.show()
  fig_1.savefig('ann_vs_swmm_time_' + manhole_str + '.png',
                dpi = 300)

  fig_2, ax_2 = plt.subplots()
  ax_2.scatter(y_pred, y_test)
  ax_2.set_xlabel('Water Level ANN [m]')
  ax_2.set_ylabel('Water Level SWMM [m]')
  plt.show()
  fig_2.savefig('ann_vs_swmm_scatter_' + manhole_str + '.png',
              dpi = 300)
  
  return(np.array([rmse, mae, r2, nse]))

eval_fb_ara = eval_multivar(y_test_fb_ara, y_pred_fb_ara, 'fb_ara')
eval_rub_usterstrasse = eval_multivar(y_test_rub_usterstrasse, y_pred_rub_usterstrasse, 'rub_usterstrasse')
eval_rb_pw_80 = eval_multivar(y_test_rb_pw_80, y_pred_rb_pw_80, 'rb_pw_80')
eval_bacheinlauf_47 = eval_multivar(y_test_bacheinlauf_47, y_pred_bacheinlauf_47, 'bacheinlauf_47')

print(eval_fb_ara)
print(eval_rub_usterstrasse)
print(eval_rb_pw_80)
print(eval_bacheinlauf_47)

#plot specific event
def plot_event(y_test, y_pred, manhole_str):
  #low_ind = 5900
  #upp_ind = 6500
  low_ind = 64880
  upp_ind = 65020
  #low_ind = 74400
  #upp_ind = 75000
  #low_ind = 34800
  #upp_ind = 35100
  #low_ind = 55550 #ann failure
  #upp_ind = 55650
  fig_3, ax_3 = plt.subplots()
  ax_3.plot(date_time_test[low_ind:upp_ind], y_pred[low_ind:upp_ind], label = 'Water Level ANN')
  ax_3.plot(date_time_test[low_ind:upp_ind],y_test[low_ind:upp_ind], label = 'Water Level SWMM')
  ax_3.set_ylabel('Water Level [m]')
  ax_3.legend()
  fig_3.autofmt_xdate()
  plt.show()
  fig_3.savefig('ann_event_' + manhole_str + '.png',
                dpi = 300)
  
plot_event(y_test_fb_ara, y_pred_fb_ara, 'fb_ara')
plot_event(y_test_rub_usterstrasse, y_pred_rub_usterstrasse, 'rub_usterstrasse')
plot_event(y_test_rb_pw_80, y_pred_rb_pw_80, 'rb_pw_80')
plot_event(y_test_bacheinlauf_47, y_pred_bacheinlauf_47, 'bacheinlauf_47')

#plot all of them together
low_ind = 64880
upp_ind = 65020
fig_4, ax_4 = plt.subplots()
ax_4.plot(date_time_test[low_ind:upp_ind], y_pred[low_ind:upp_ind])

ax_4.set_ylabel('Water Level [m]')
ax_4.legend()
fig_4.autofmt_xdate()
plt.show()
fig_4.savefig('ann_event_all.png',
              dpi = 300)

#validation: compare data with overflow, f1 score
def evaluate_classification(y_test, y_pred, over_level):
  y_test_class = y_test > over_level
  y_pred_class = y_pred > over_level
  f1_eval = f1_score(y_test_class, y_pred_class)
  print(f1_eval)
  conf_mat = confusion_matrix(y_test_class, y_pred_class)
  print(conf_mat)

over_level = 0.5

evaluate_classification(y_test_fb_ara, y_pred_fb_ara, over_level = over_level)
evaluate_classification(y_test_rub_usterstrasse, y_pred_rub_usterstrasse, over_level = over_level)
evaluate_classification(y_test_rb_pw_80, y_pred_rb_pw_80, over_level = 1)
evaluate_classification(y_test_bacheinlauf_47, y_pred_bacheinlauf_47, over_level = 0.01)

#speed evaluation, predict training set
start = timer()
dummy_pred = model.predict(normed_X_train)
end = timer()
print((end - start)/0.8) # Time in seconds

#plot histogram of level

fig_hist, ax_hist_level = plt.subplots()
ax_hist_level = sns.distplot(design_df['level_3'])
ax_hist_level.set_xlabel('Water Level SWMM [m]')
fig_hist.savefig('swmm_level_hist.png', dpi = 300)